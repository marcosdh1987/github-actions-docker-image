name: Build, Push Docker Image and Deploy with Terraform

on:
  push:
    branches:
      - main

env:
  ECR_URL : 789524919849.dkr.ecr.us-east-1.amazonaws.com
  IMG_NAME : sm-studio-custom-python310
  IMAGE_TAG : latest
  TF_WORKING_DIR: path/to/terraform/code/directory

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make

      - name: Build Docker image
        run: make build

  push-to-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check if ECR repository exists
        id: check-ecr-repo
        run: |
          aws ecr describe-repositories --repository-names ${{ env.IMG_NAME }} || exit 0
          echo "::set-output name=exists::true"

      - name: Create ECR repository if it doesn't exist
        if: steps.check-ecr-repo.outputs.exists != 'true'
        run: |
          aws ecr create-repository --repository-name ${{ env.IMG_NAME }}
          echo "::set-output name=created::true"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker image
        run: |
          make promote

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ env.ECR_URL }}/${{ env.IMG_NAME }}:${{ env.IMAGE_TAG }}

# docker tag ${{ env.IMG_NAME }} ${{ env.ECR_URL }}/${{ env.IMG_NAME }}:${{ env.IMAGE_TAG }}
  # deploy-with-terraform:
  #   needs: push-to-ecr
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Deploy using Terraform
  #       run: |
  #         cd $TF_WORKING_DIR
  #         terraform init
  #         terraform plan -out=tfplan
  #         terraform apply tfplan
